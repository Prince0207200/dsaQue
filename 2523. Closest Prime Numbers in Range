
class Solution {
public:
    vector<int> closestPrimes(int left, int right) {
        

        
        vector<bool> arr(right + 1, true);
        arr[0] = arr[1] = false;  

        for (int i = 2; i * i <= right; i++) {
            if (arr[i]) {
                for (int j = 2; i*j <= right; j++) {  
                    arr[j*i] = false;
                }
            }
        }

        
        vector<int> primes;
        for (int i = left; i <= right; i++) {
            if (arr[i]) {
                primes.push_back(i);
            }
        }

       
        

        int minDiff = INT_MAX;
        vector<int> res = {-1, -1};
        for (int i = 1; i < primes.size(); i++) {  
            int diff = primes[i] - primes[i - 1];
            if (diff < minDiff) {
                minDiff = diff;
                res = {primes[i - 1], primes[i]};
            }
        }

        return res;
    }
};



class Solution {
public:
    vector<int> closestPrimes(int left, int right) {
        if (right < 2) return {-1, -1};  // No primes exist below 2

        // Step 1: Sieve of Eratosthenes
        vector<bool> arr(right + 1, true);
        arr[0] = arr[1] = false;  // 0 and 1 are not prime

        for (int i = 2; i * i <= right; i++) {
            if (arr[i]) {
                for (int j = i * i; j <= right; j += i) {  // Start from i*i
                    arr[j] = false;
                }
            }
        }

        // Step 2: Collect primes in range [left, right]
        vector<int> primes;
        for (int i = max(left, 2); i <= right; i++) {
            if (arr[i]) {
                primes.push_back(i);
            }
        }

        // Step 3: Find closest prime pair
        if (primes.size() < 2) return {-1, -1};  // No pairs exist

        int minDiff = INT_MAX;
        vector<int> res = {-1, -1};
        for (int i = 1; i < primes.size(); i++) {  // Fixed out-of-bounds bug
            int diff = primes[i] - primes[i - 1];
            if (diff < minDiff) {
                minDiff = diff;
                res = {primes[i - 1], primes[i]};
            }
        }

        return res;
    }
};
