class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (!head || !head->next) return head; // Edge case: empty or single node list
        
        ListNode* odd = head;         // First odd node
        ListNode* even = head->next;  // First even node
        ListNode* evenHead = even;    // Store even head for later connection

       

        while (even && even->next) { 
            odd->next=even->next;
            even->next=even->next->next;
            odd=odd->next;
            even=even->next;
             
        }

        odd->next = evenHead; 
        return head; 


        // if (!head || !head->next) return head; // Edge case: empty or single node list
        
        // ListNode* odd = head;         // First odd node
        // ListNode* even = head->next;  // First even node
        // ListNode* evenHead = even;    // Store even head for later connection

        // int c = 1;  // Start count from 1 because head is odd

        // while (even && even->next) {  // Ensure even is valid before accessing next
        //     if (c % 2 == 1) {  // If odd position
        //         odd->next = even->next;  
        //         odd = odd->next;  // Move odd pointer
        //     } else {  // If even position
        //         even->next = odd->next;
        //         even = even->next;  // Move even pointer
        //     }
        //     c++;  
        // }

        // odd->next = evenHead; // Connect last odd node to even list
        // return head;  // Return modified list
    }
};
